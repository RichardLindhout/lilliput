package lilliput

import (
	"encoding/base64"
	"io/ioutil"
	"testing"
)

func TestThumbhash(t *testing.T) {
	checkImage := func(expectedB64Hash, filePath string, ops *ImageOps, width int, height int, dst []byte) {
		inputBuf, err := ioutil.ReadFile(filePath)
		if err != nil {
			t.Fatalf("failed to read input file %q: %v", filePath, err)
		}

		decoder, err := NewDecoder(inputBuf)
		if err != nil {
			t.Fatalf("error decoding image %q: %v", filePath, err)
		}
		defer decoder.Close()

		header, err := decoder.Header()
		if err != nil {
			t.Fatalf("error reading image header of %q: %v", filePath, err)
		}

		resizeMethod := ImageOpsResize
		if width == header.Width() && height == header.Height() {
			resizeMethod = ImageOpsNoResize
		}

		opts := &ImageOptions{
			FileType:             ".thumbhash",
			Width:                width,
			Height:               height,
			ResizeMethod:         resizeMethod,
			NormalizeOrientation: true,
		}
		hash, err := ops.Transform(decoder, opts, dst)
		if err != nil {
			t.Fatalf("error transforming image %q: %v", filePath, err)
		}
		b64Hash := base64.StdEncoding.EncodeToString(hash)

		if b64Hash != expectedB64Hash {
			t.Errorf("hash of %q is %q but should be %q",
				filePath, b64Hash, expectedB64Hash)
		}
	}

	ops := NewImageOps(8192)
	defer ops.Close()
	dst := make([]byte, 0, 1024*1024)

	// These test images came from the demo page at:
	// https://evanw.github.io/thumbhash/
	//
	// The expected thumbhashes in the tests were generated using the reference
	// rust implementation there.
	//
	// Note the thumbhashes for 'field.jpg' and 'opera.png' generated by the
	// rust reference code were slightly different than the respective hashes in
	// the demo page (presumably generated by the JS reference implementation).
	//
	// This is not very surprising given the heavy reliance on floating point
	// math. The differences were likely rounding errors. The decoded images
	// from those hashes were visually identical.
	checkImage("1QcSHQRnh493V4dIh4eXh1h4kJUI", "data/sunrise.jpg", ops, 75, 100, dst)
	checkImage("3PcNNYSFeXh/d3eld0iHZoZgVwh2", "data/sunset.jpg", ops, 100, 75, dst)
	checkImage("3OcRJYB4d3h/iIeHeEh3eIhw+j3A", "data/field.jpg", ops, 100, 75, dst)
	checkImage("HBkSHYSIeHiPiHh8eJd4eTN0EEQG", "data/fall.jpg", ops, 100, 66, dst)
	checkImage("VggKDYAW6lZvdYd6d2iZh/p4GE/k", "data/street.jpg", ops, 100, 75, dst)
	checkImage("2fcZFIB3iId/h3iJh4aIYJ2V8g==", "data/mountain.jpg", ops, 100, 58, dst)
	checkImage("IQgSLYZ6iHePh4h1eFeHh4dwgwg3", "data/coast.jpg", ops, 100, 75, dst)
	checkImage("YJqGPQw7sFlslqhFafSE+Q6oJ1h2iHB2Rw==", "data/firefox.png", ops, 97, 100, dst)
	checkImage("mYqDBQQnxnj0JoLYdN7f8JhpuDeHiHdwZw==", "data/opera.png", ops, 100, 100, dst)
	checkImage("mYqDBQQnxnj0JoLYdN7f8JhpuDeHiHdwZw==", "/tmp/lena.jpg", ops, 512, 512, dst)

	checkImage("VvYRNQRod313B4h3eHhYiHeAiQUo", "data/large-sunrise.png", ops, 1300, 1942, dst)
}
